// Mocks generated by Mockito 5.4.2 from annotations
// in fitur_auth_guard/test/unit/unit.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:common/domain/repository/i_token_manager.dart' as _i6;
import 'package:dependencies/http.dart' as _i2;
import 'package:fitur_auth_guard/data/api_client/login_api_client.dart' as _i3;
import 'package:fitur_auth_guard/domain/model/post_login_dto.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginApiClient extends _i1.Mock implements _i3.LoginApiClient {
  MockLoginApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> login(_i5.PostLoginDto? data) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [data],
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #login,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Response>);
}

/// A class which mocks [ITokenManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockITokenManager extends _i1.Mock implements _i6.ITokenManager {
  MockITokenManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<Map<String, String>> getTokenizedHeader() => (super.noSuchMethod(
        Invocation.method(
          #getTokenizedHeader,
          [],
        ),
        returnValue: _i4.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i4.Future<Map<String, String>>);
}
